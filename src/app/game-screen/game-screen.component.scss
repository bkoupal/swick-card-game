@use "sass:math";

@mixin cardTransform($offset-x, $offset-y, $angle) {
  transform: translate(
    calc(
      (-50% - var(--table-unit) * $offset-x) *
        math.round(math.cos($angle * 1deg))
    ),
    calc(
      (-50% - var(--table-unit) * $offset-y) *
        math.round(math.sin($angle * 1deg))
    )
  );
}

//First argument should be gameConfig.maxClients + 1
@mixin playingTable($players-count, $min-height, $default-height, $max-width) {
  //Set global variables
  @at-root ::ng-deep :root {
    --playing-table-aspect-ratio: 2/1;
    --table-unit: clamp(
      #{$min-height},
      #{$default-height},
      #{$max-width} / var(--playing-table-aspect-ratio)
    );
  }

  position: relative;
  border-radius: 100%;

  aspect-ratio: var(--playing-table-aspect-ratio);
  height: var(--table-unit);

  > * {
    position: absolute;

    $angleStep: calc(360 / $players-count);
    $angle: 315; // Was 270, now adjusted for 8-position layout

    @for $i from 1 through $players-count {
      &:nth-child(#{$i}) {
        left: calc(50% * math.cos($angle * 1deg) + 50%);
        top: calc(50% * math.sin($angle * 1deg) + 50%);
        transform: translate(-50%, -50%);
        z-index: 10;

        //Used for card enter/leave animations
        --card-translation-x: #{calc(-100% * math.cos($angle * 1deg))};
        --card-translation-y: #{calc(-100% * math.sin($angle * 1deg))};

        //Sets the initial cards position
        ::ng-deep .card-holder {
          @include cardTransform(0.17, 0.12, $angle);

          @screen 2xl {
            @include cardTransform(0.11, 0.09, $angle);
          }
        }
      }

      $angle: $angle + $angleStep;
    }
  }
}

@mixin playingTableMobile($players-count, $width) {
  $table-unit: 280px; // Increased from 210px to 280px for slightly larger cards
  $player-row-height: $table-unit * 0.45;
  $non-player-row-height: $table-unit * 0.3;

  @at-root ::ng-deep :root {
    --table-unit: #{$table-unit};
  }

  height: ($players-count - 2) * $non-player-row-height + 2 * $player-row-height;

  position: relative;
  width: $width;
  border-radius: 32px;

  > * {
    position: absolute;

    @for $i from 1 through $players-count {
      &:nth-child(#{$i}) {
        @if $i == 1 {
          // Position 1: Top center
          top: 0%;
          left: 50%;
          transform: translate(-50%, -50%);
          --card-translation-y: 100%;
          --card-translation-x: 0%;
        } @else if $i == $players-count {
          // Position 8: Bottom center (current player)
          top: 100%;
          left: 50%;
          transform: translate(-50%, -50%);
          --card-translation-y: -100%;
          --card-translation-x: 0%;
        } @else {
          // Side positions (2,3,4,5,6,7) - CORRECTED positioning

          // Horizontal positioning: Move players further outward from center
          @if $i % 2 == 0 {
            // Even positions (2,4,6) = RIGHT side - move further right
            left: 100%;
          } @else {
            // Odd positions (3,5,7) = LEFT side - move further left
            left: 0%;
          }

          // Vertical positioning: Tighter spacing between levels
          @if $i == 2 or $i == 3 {
            top: 28%; // Top third (moved down slightly)
          } @else if $i == 4 or $i == 5 {
            top: 48%; // Middle (unchanged)
          } @else if $i == 6 or $i == 7 {
            top: 68%; // Bottom third (moved up slightly)
          }

          transform: translate(-50%, -50%); // Center the player boxes
          --card-translation-y: 0%;
          --card-translation-x: #{100% - ($i - 1) % 2 * 200%};
        }

        // Card holder positions (keep existing logic)
        ::ng-deep .card-holder {
          @if $i == 1 {
            transform: translateY(calc(50% + 23px));
          } @else if $i == $players-count {
            transform: translateY(calc(-50% - 45px));
          } @else if $i % 2 == 0 {
            transform: translateX(calc(-50% - $table-unit * 0.2));
          } @else {
            transform: translateX(calc(50% + $table-unit * 0.2));
          }
        }
      }
    }
  }
}

.player-holder {
  @apply bg-green-600;

  // Force rectangle layout on all devices for consistent experience
  @include playingTableMobile(8, 75vw);

  @screen sm {
    @include playingTableMobile(8, 80vw);
  }

  @screen lg {
    @include playingTableMobile(8, 70vw);
  }
}

//Create font sizes that are relative to playing table size
::ng-deep .table-font-xl {
  font-size: calc(var(--table-unit) * 0.065);
  line-height: calc(var(--table-unit) * 0.095);
}

::ng-deep .table-font-lg {
  font-size: calc(var(--table-unit) * 0.05);
  line-height: calc(var(--table-unit) * 0.075);
}

::ng-deep .table-font {
  font-size: calc(var(--table-unit) * 0.035);
  line-height: calc(var(--table-unit) * 0.055);

  @screen 2xl {
    font-size: calc(var(--table-unit) * 0.024);
    line-height: calc(var(--table-unit) * 0.036);
  }
}

// Add these new mobile-optimized font classes to your game-screen.component.scss file
// Insert after the existing ::ng-deep .table-font section

// ðŸŽ¯ MOBILE-OPTIMIZED PLAYER NAME FONTS
// These classes prioritize mobile readability while maintaining desktop balance

::ng-deep .table-font-player-name {
  // Larger base font size optimized for mobile readability
  font-size: calc(
    var(--table-unit) * 0.055
  ); // ~15.4px on mobile (up from 9.8px)
  line-height: calc(var(--table-unit) * 0.075); // ~21px line height
  font-weight: 600; // Semi-bold for better visibility

  // Tablet optimization
  @media (min-width: 769px) and (max-width: 1024px) {
    font-size: calc(var(--table-unit) * 0.048); // Slightly smaller on tablets
    line-height: calc(var(--table-unit) * 0.065);
  }

  // Desktop scaling
  @media (min-width: 1025px) {
    font-size: calc(var(--table-unit) * 0.042); // Balanced for larger screens
    line-height: calc(var(--table-unit) * 0.058);
  }

  // Extra large desktop (maintain proportions but don't get too big)
  @screen 2xl {
    font-size: calc(var(--table-unit) * 0.042); // Controlled growth
    line-height: calc(var(--table-unit) * 0.058);
  }
}

// Special variant for dealer names (slightly larger for emphasis)
::ng-deep .table-font-dealer-name {
  @extend .table-font-player-name;

  // Dealer names are slightly larger for better hierarchy
  font-size: calc(var(--table-unit) * 0.06); // ~16.8px on mobile
  line-height: calc(var(--table-unit) * 0.08); // ~22.4px line height
  font-weight: 700; // Bold for dealer distinction

  @media (min-width: 769px) and (max-width: 1024px) {
    font-size: calc(var(--table-unit) * 0.052);
    line-height: calc(var(--table-unit) * 0.07);
  }

  @media (min-width: 1025px) {
    font-size: calc(
      var(--table-unit) * 0.095
    ); // Extra large for desktop dealers
    line-height: calc(var(--table-unit) * 0.115);
  }

  @screen 2xl {
    font-size: calc(var(--table-unit) * 0.095); // Very prominent dealer names
    line-height: calc(var(--table-unit) * 0.115);
  }
}

.everyone-passed-announcement {
  animation: fadeInScale 0.6s ease-out;
}

@keyframes fadeInScale {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.game-privacy-indicator {
  position: fixed;
  top: 10px;
  right: 10px;
  z-index: 1000;

  mat-chip {
    font-size: 0.8rem;
    font-weight: 500;

    mat-icon {
      font-size: 16px;
      width: 16px;
      height: 16px;
      margin-right: 4px;
    }
  }
}

.room-id-display {
  position: fixed;
  top: 50px;
  right: 10px;
  z-index: 1000;

  mat-chip {
    font-size: 0.75rem;
    font-weight: 500;
    background-color: rgba(244, 67, 54, 0.1) !important;
    border: 1px solid rgba(244, 67, 54, 0.3);

    mat-icon {
      font-size: 14px;
      width: 14px;
      height: 14px;
      margin-right: 4px;
    }
  }
}

/* Mobile responsive adjustments */
@media (max-width: 768px) {
  .game-privacy-indicator {
    top: 5px;
    right: 5px;

    mat-chip {
      font-size: 0.7rem;

      mat-icon {
        font-size: 14px;
        width: 14px;
        height: 14px;
      }
    }
  }

  .room-id-display {
    top: 35px;
    right: 5px;

    mat-chip {
      font-size: 0.65rem;

      mat-icon {
        font-size: 12px;
        width: 12px;
        height: 12px;
      }
    }
  }
}

/* Ensure indicators don't interfere with existing UI */
@media (max-width: 480px) {
  .game-privacy-indicator,
  .room-id-display {
    position: relative;
    top: auto;
    right: auto;
    margin: 5px;
    text-align: center;
  }
}
